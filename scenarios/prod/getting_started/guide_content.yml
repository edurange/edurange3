ScenarioTitle: Getting started

# Define content sections with aliases
contentDefinitions:
  Reading1: &reading1
    type: reading
    content: |
      ### Your Briefing
      
      Congratulations and welcome to CyberSec. As an intern you will need to complete this training on how to use the command line. You may need to strengthen your command line skills before you can complete the other parts of your training. Remember, this world is being controlled by malicious influences and we must learn to protect ourselves from their invasive attacks. We must protect our data. This is why you are here; to protect yourself, your organization and your community. This is the beginning - it all starts here, with a terminal command prompt.
    styles:
      - heading
      - justify-center
      - align-bottom
  Reading2: &reading2
    type: reading
    content: |
      ### How to Connect
      
      Use the credentials and IP address provided on the scenario page to SSH into the exercise. SSH is an important network protocol that is used in most of our scenarios, so you need some minimal knowledge on how to use it on your OS.
  Reading3: &reading3
    type: reading
    content: |
      When using your computer (Mac, Linux, Windows), you often need to interact with the operating system, e.g. the file system.
      A shell is a program that allows you to interact with the OS in text mode, also called the command line or CLI.
      
      Graphical user interfaces (GUI) are generally designed to not let the user make a mistake. However, they can sometimes restrict the user beyond that requirement. Text-based interfaces often allow you to make more mistakes, but they give you more freedom.
      To get into the guts of your computer and really learn how to control it we will learn how to use the command line through a terminal. Learning to use the command line is your first goal in this adventure.
      
      More reasons why you should you learn the command line:
      
      - You gain greater control over the system (computer) because you have more options.
      
      - You can script repetitive tasks. A GUI interface just doesn't have the option to loop.
      
      - Just like keyboard shortcuts in a GUI, the command line is quick to use. Anything from starting a program to searching for files is faster and easier through the command line once you are comfortable with it.
      
      - Creating scripts and having logical control structures like loops provide all the tools you need to create new programs and commands. This isn't just a convenience feature - it allows you handle tasks simultaneously and automatically so that you can concentrate on the big picture.
      
      - In a GUI, the computer sorts information into windows, menus, buttons, etc. - to make it easier for a human operator to perform certain workflows. The command line takes a much simpler approach - to make it more flexible for a programmer to design new workflows. While there are many commands that do many things, on the command line, everything is controlled and reported by text.
      
      - Stable design: sometimes it is the only interface you have. The command line has been a part of computing for a long time. It is ubiquitous, even if it is often invisible to the end user. Because so many systems depend on it, it is stable, reliable, fast and lightweight. So lightweight, in fact, that you might be surprised at how many devices you can talk to through the command line. As cybersecurity specialist, it will be an important tool - sometimes the only tool you have.
      
      In summation, it allows you to work faster than a GUI, provides built-in automation, and you'll find it on almost any system.
  Reading4: &reading4
    type: reading
    content: |
      ### Hierarchy
      
      Linux folders and files are arranged a tree structure, where the root node is the beginning of a path to any file in the entire file system. The root node is typed as the slash `/`. The leaves of the tree are the individual files. This means that if you want to search the entire file system, you need to start at `/`.
  Reading5: &reading5
    type: reading
    content: |
      ### root has more than one meaning
      
      In a Linux system, control over the root node is protected by restricting it to a single user. Early systems engineers chose to call this user `root`, which became a convention. Because this user has control of the root node, and thus anything stored on the system at all, the root user became the de facto authority over most things security-related. (On Windows, this user is instead called administrator by default, but the name can be changed.)
      
      With both the root user and root node being important vocabulary for system administration, you'll come across ambiguities sometimes. The root, signified by just `/`, is the beginning of all the system's files. But if you were to log in as the root user, your home directory - where you can save files - would be the folder `/root`, not the root node, `/`. The `/root` folder is not to be confused with the `/`, the beginning of the path to all the files.
  Reading6: &reading6
    type: reading
    content: |
      ### Important
      
      A root user is someone who has access to everything on the computer. They could even delete everything on the computer. Best practices are to disable root login or use a _very_ strong password (for example using numbers, letters, capitals, special symbols and a random sampling of each, and no dictionary words). When setting up your own systems, be aware of how the root user and privileges are configured and controlled. Some systems might not ask to set up credentials initially, leaving the root password set to a default value after install. That might be convenient for an attacker, but don't let it happen to a system of your own!
  Reading7: &reading7
    type: reading
    content: |
      What is a shell command? Commands are executable programs that you can call from your command line terminal. The most common place to look for shell commands is in the `/bin` folder. Let's get started right away and use two different commands.
  Reading8: &reading8
    type: reading
    content: |
      ### `cd`
      
      `cd` stands for "change directory", meaning to navigate to a new folder.
      
      Type each of the following, one at a time, hitting enter after each:
      
      ```sh
      cd /
      cd /root
      cd
      cd ../
      ```
      
      The first command sends you to the root of your entire file system.
      
      The second command sends you to the root user's home directory, but notice that you don't have permissions to `cd` to that directory.
      
      The third command sends you to the default location, your home directory, because no path was specified with the command.
      
      The fourth command sends you backwards (up) a level. Why does it do that? `..`, pronounced "dot-dot", is a special shorthand meaning the parent of the directory at that point on the path. Similarly, `.` means the current directory. (Why would you need that? A full explanation would take too long at this point, but suffice to say that the `.` helps you specify a file that's in your current directory in cases where it would be ambiguous otherwise.)
      
      TASK: `cd` to `/bin` then `cd` back to your home directory.
  Reading9: &reading9
    type: reading
    content: |
      ### `ls` and file access control
      
      `ls` "lists" files and directories.
      
      Type:
  
      ```sh
      ls
      ```
  Reading10: &reading10
    type: reading
    content: |
      There are parameters and options you can give a command to change how it behaves. What if you wanted to both list the permissions of a file and find hidden files? (Yes, there are hidden files!)
      
      Now type:
      
      ```sh
      ls -la
      ```
      
      Then hit enter.
      
      That's a lot of info! What you see are all the files and directories in the directory (folder) where you are currently working.
      
      - The first column is a string of characters indicating the type of file followed by its permissions. A `â€“` at the beginning means a regular file. `d` is a directory (folder). `l` is a link. The rest of the string is either `-` or `r`, `w`, and `x`. `r` here stands for "read", `w` for "write" and `x` for "execute". `-` in the position of one of the letters means that type of permission is denied. Permissions can be set based for the user owning the file, users in the group owning the file, or all other users, and so the permission string repeats each `rwx` three times. (Finer control over permissions is possible, but those details are not displayed by `ls`.)
      
      - The second column is the number of links or sub-directories in the directory, if this file is a directory. (In Linux, we tend to think of all things as files; even directories are just a special type of file.)
      
      - The third column is the user that owns the folder/file.
      
      - The fourth is the group that owns the folder/file.
      
      - The fifth is the size of the folder/file.
      
      - The sixth is the date and time it was last edited (or `touch`ed).
      
      - And finally, the file name in the seventh column, on the far right.
      
      #### globbing with `ls`
      
      If there are a lot of files in a directory, it can be useful to restrict what `ls` looks at to a subset that match a pattern. This is called globbing. For example, if you are only interested in files with the extension `.jpg`, you can use:
      
      ```sh
      ls *.jpg
      ```
      
      This will be discussed in detail below.
  Reading11: &reading11
    type: reading
    content: |
      ### Man Pages
      
      "Man pages" is short for manual pages. These are text documents with lots of information on commands. Remember the command we did for listing our files, `ls`? Let's find that man page.
      
      Type:
      
      ```sh
      man ls
      ```
      
      and hit enter.
      
      Remember how we typed `ls -la`? Let's learn what `-l` and `-a` do!
      
      
      
      #### Find "-l"
      
      To search inside a man page, you can use `/`; type `/-l` and hit enter. You should see the page move to the first occurrence of `-l` found and that `-l` is highlighted. You can jump to the next matching result by hitting `n` (which stands for "next"). Press `n` until you see `-l` highlighted at the beginning of the line; this is where the option is defined and will be above the line for `-L`. The "long" listing option shows results with details in columns as seen in the earlier exercise.
      
      If you don't see it highlighted, you may have typed something by mistake, or your console colors may not be set up properly. Try retyping `/-l`.
      
      #### Find "-a"
      
      Type `/-a` and hit enter. Hit `n` till you can't go any further. Now hit `b` (which stands for "back") until you find the entry for `-a` which is above `-A`. The explanation on the man page might be a little terse. Remember when we mentioned that files can be hidden? By default, `ls` ignores file names that start with `.`. The "all" option specifies that files that start with `.` like `.bashrc` (which are typically hidden) should be displayed.
      
      
      #### `q`
      
      When in a man page and you need to get out, just type `q`.
      
      TASK: Open the man page for `mv`. Can you give a brief description of what the command `mv` does?
  Reading12: &reading12
    type: reading
    content: |
      ### Tip: command and file name completion
      
      If you are typing a long filename or path, you can hit tab, and the shell will try to complete it. If the completion is not unique, the shell will only complete to the point of ambiguity. And unlike auto-correct, tab completion only happens when you ask for it.
      
      A note on filenames: Using spaces in a filename does not play well with the shell because the shell will try to interpret space-separated strings as separate names or command parameters. There are various solutions to handle this, including tab completion, but it is better not to create the problem in the first place.
  Reading13: &reading13
    type: reading
    content: |
      ### `pwd`
      
      `pwd` stands for "print working directory" - it will tell you where you are within the filesystem.
      
      Now type:
      
      ```sh
      pwd
      ```
      
      You should see something similar to `/home/yourusername`. To learn more type `man pwd`. (Remember, type `q` to exit when you're done with `man`.)
      
      
      TASK: `cd` into your home directory and then type `ls` and you will see a directory called `follow_Me`. Travel as deep as that folder will go. When you get to the end there is a file whose name is a randomized number. Find that.
  Reading14: &reading14
    type: reading
    content: |
      ### `sudo`
      
      Access to some commands and files may need to be restricted, but as we said logging in as root gives the user permissions to do anything. The way to manage this safely is with sudo (which stands for "superuser do"). This gives unprivileged users access to privileged commands. The use of `sudo` is usually restricted to a small number of users referred to as superusers.
  Reading15: &reading15
    type: reading
    content: |
      Not all files appear as they really are. Just because you see a file named `imanimage.png` does not mean that there is PNG image data inside. It could be a text file, or even contain harmful executable code! File extensions are a convention for keeping things organized - not an enforced rule or a promise about what the file actually is. Whoever creates the file chooses its name and extension, however they like. So, how can you get more information on what a file actually contains? One way is with the `file` command!
  Reading16: &reading16
    type: reading
    content: |
      ### `file`
      
      To find out what a file really is regardless of its extension, you could examine the bytes, but `file` can often do this for us automatically. Check out the man page using `man file`. What type of options are there with `file`? Now let's test it. Type `q` to get out of the man page.
      
      There are two files in a directory called `toLearn`, under your home directory. One is called `cat.jpg` and the other is `dog.jpg`.
      
      Both look like JPEG images, right? But if you type in `ls -l` you will notice that one is a lot larger in size than the other. One is about 25,000 bytes whereas the other is only about 20. Let's see what is really going on.
      
      
      
      Type:
  
      ```sh
      file dog.jpg
      ```
      
      You'll see something like:
      
      ```sh
      user@GettingStarted$ file dog.jpg
      dog.jpg: ASCII text
      ```
      
      Now type:
      
      ```sh
      file cat.jpg
      ```
      
      You'll see something like:
      
      ```sh
      user@GettingStarted$ file cat.jpg
      cat.jpg: JPEG image data, Exif standard: TIFF image data, ... etc.
      ```
      
      ... etc.
  Reading17: &reading17
    type: reading
    content: |
      ### `cat`
      
      Now let's learn a new command, `cat`. `cat` prints out the text from a file.
      
      Type:
      
      ```sh
      cat dog.jpg
      ```
      
      Go through to the end. You should see something like:
      
      ```sh
      meow I am a doggo
      ```
      
      TASK: In your home directory there is a folder called `stuff`. Open that up and find out what file types are in there. One is a text file (ASCII). `cat` that and find the secret code inside.
  Reading18: &reading18
    type: reading
    content: |
      ### Case Sensitivity
      
      Case sensitivity means that lower case characters are considered different than their upper case equivalents. Most, but not all, Linux systems have case-sensitive file systems. If you search for a file called `hiya.docx`, it would not be the same as finding a file, `hiyA.docX`.
      
      ### `touch`
      
      `touch` is a command that "touches" a file. If the file exists `touch` updates its modified date. If the file does not exist, then an empty file will be created at that location. As always, `man touch` to learn more.
      
      ### `echo`
      
      `echo` is a simple and versatile command. It can evaluate an expression and write it to the terminal standard output (STDOUT, which we'll explain further below). You can use this in many different ways. A simple example is where the expression is a string literal.
      
      Type:
      
      ```sh
      echo "This is echoed"
      ```
      
      You will see that it was repeated back to you!
      
      ### Input/Output Redirection
      
      Redirection operators, which are binary operators, are written with angle brackets as `>`, `>>`, `<` and `<<` are used to automatically write the output of a command to a file or a file to standard input (STDIN) of a command. They have many uses. `>` will replace a file with what is output by the left hand side (LHS). If the file already exists, `>` will replace the file with what you sent it, in effect deleting the previous content. In contrast if you use `>>`, this will append what you sent to the bottom of the file, leaving the rest of the file intact. Let's give it a try.
      
      Type:
      
      ```sh
      echo "This is cool" > newfile
      cat newfile
      ```
      
      Now type:
      
      ```sh
      echo "This is cool too" > newfile
      cat newfile
      ```
      
      You can see that `>` will replace any text with what you send it, while `>>` will append to a file.
      
      Type:
      
      ```sh
      echo "This is another thing" >> secondfile
      echo "Hello World" >> secondfile
      cat secondfile
      ```
      
      Now let's combine the two files.
      
      Type:
      
      ```sh
      cat newfile >> secondfile
      cat secondfile
      ```
      
      You can see the contents of `newfile` appended to the end of `secondfile` whereas if you `cat newfile` it will still only have what we wrote to it earlier.
      
      TASK: There is a directory in your home called `textfiles`. Inside are three files; append them all to a new file called `alltogether.txt` in your home directory.
      
      The tip below is _not_ required but only if you want a harder task!
      
      Optionally, for an extra challenge, there are ways to accomplish this in one line. Here is a hint for one way to do it. Type:
      
      `echo "one"; echo "two"; echo "three"`
      
      ### Tip: Use Redirection to Filter Output Streams
      
      One useful trick you can do with redirection operators is suppress error messages. Say you have a command that produces lots of output, like searching through every sub-directory a big directory with `find`, and sometimes that command produces errors, for example when `find` tries to search a directory for which you don't have permissions. If you want to just focus on the normal output, and suppress all errors that may result, add '2>/dev/null' to the end of your command. For example:
      
      ```sh
      find . filename 2>/dev/null
      ```
      
      To learn more about what the number two stands for, and what `/dev/null` is, read this reference on TTY streams: <link TODO>
  Reading19: &reading19
    type: reading
    content: |
      ### Shell Globbing vs Regular Expressions
      
      We briefly mentioned globbing earlier as a way to search or filter certain filenames. This is also known more generally as pattern matching; glob patterns are one of several pattern matching tools you'll have available on the command line. They can be used with many shell commands, e.g. `ls`, `cat`.
      
      The `*` wildcard in the pattern can match any string. For example, if I wanted to find a file with the substring `spekter` in it, then I could use `*spekter*`. This means, "Match zero or more characters before, then match the literal string 'spekter', then match zero or more characters after." Or more casually, "Search for 'spekter' and I don't care if there is anything else before or after." This would match any of the following:
      
      ```sh
      spekter
      spekters
      allspekters
      ```
      
      On the other hand, regular expressions are used to search text. They can help you find something on your computer in a file and can be used in your programs to make handling textual data easier. Regular expressions (or "regex") are a big topic alone, big enough that entire books are written about them.
      
      Globbing and regex are both used for pattern matching, but they are not the same, so don't mix them up. In particular, '*' in a regex has a completely different meaning from that in globbing and is not a wildcard. It's not always clear just from looking at a command whether a pattern is a glob or a regex. When in doubt, check the command's man page to see what it expects.
      
      There are other wildcards besides from the `*` that do different things, such as to match a single character, and you can go further to mix the way wildcards work by matching specific selections of characters or even substrings. 
      
      
      ### `find`
      
      Another command that can use globbing is `find`. `find` is a very helpful tool that you can use to find things on your computer. Take a moment to peruse the man page for `find`. (`man find`) Get an idea of how it is used.
      
      An example as discussed earlier:
      
      ```sh
      find . -type f -iname *spekter*
      ```
      
      What you see is the command `find`.
      
      - The `.` parameter is a path that tells `find` where to start the search; in this case it's the current working directory. (Remember the dot is shorthand for the directory where you are. We could also type in `/Documents` or a full path from the root `/`. Wherever you need to search.
      
      - The parameter `-type` tell `find` that you want to find a specific type of object. In this case, the following parameter `f` stands for a regular file.
      
      - `-iname` is telling `find` to search based on the name of the file we are looking for. You can also use `-name` but `-iname` is case insensitive. We touched on case sensitivity earlier. A case insensitive search for `spekter` will return results for 'SPEKTER' and 'SpeKter' as well as just 'spekter'.
      
      - Lastly, the `*`s on either side again tell `find` that we want everything with `spekter` in it, regardless of what is around it. If I did not add that, my `find` might pull up nothing. Note that this pattern is a glob, not a regex.
      
      TASK: Hidden throughout your home directory are six image files with the text `edurange` in their names. Use your skills to find all six. Create a new file in your home directory and put the location and type of each image in that file. Remember there are many types of image file formats: PNG, JPEG, and GIF to name some common ones.
      
      Incidentally, some file extensions can refer to the same file type. For instance, JPEG files may appear with a `.jpg` suffix as well as `.jpeg`. At one time, some operating systems having limits on the length of file extensions, but today most systems can recognize both long and short file extensions.
  Reading20: &reading20
    type: reading
    content: |
      ### `mv`
      
      `mv` is used to move a file from one location to another, or to rename a file. Type `man mv` to learn more.
      
      ### `cp`
      
      `cp` is used to copy a file to a new location. Type `man cp` to learn more.
      
      ### `less`
      
      The command `less` is used to open larger files, page by page. It allows you more tools to read a file in an organized fashion than you might have just by scrolling through your terminal output.
      
      `less` and other "pager" programs like it date back to time when memory for terminal scroll back was limited or not available at all. `less` remains a useful tool when working with files on the command line. It happens that many of its advanced search features are similar to those found in `vim`.
      
      ### `fortune`
      
      `fortune` gives you, well, a fortune! Go ahead give it a whirl!
      
      
      ```sh
      fortune
      ```
      
      ### `cowsay`
      
      `cowsay` may not be the most useful command, but it is fun! See for yourself:
      
      ```sh
      cowsay "this is fun"
      ```
      
      ### Piping
      
      Can you see where we're going with this?  When you give input to a command, that input goes to something called a standard in (STDIN). Remember in Linux everything is a file - so the command can read the input from STDIN just like it can read any other file. Similarly, when you see something printed out back to you, it is using a standard out (STDOUT).
      
      A pipe, written `|`, takes the STDOUT from the command to its left, and sends that to the STDIN of the command to its right. Pipes allow us to connect one command to another without redirecting to files in between.
      
      Back to `fortune`. That fortune we get back is on `fortune`'s STDOUT. And `cowsay` needs us to type something for the cow to say, which comes to it on its STDIN. So now we can put them together to do:
      
      ```sh
      fortune | cowsay
      ```
      
      You might not use `fortune` or `cowsay` much in your security work, but pipes will be unavoidable.
      
      
      
      ## Final Mission
      
      Here at CyberSec you have been well trained, recruit. Now let's put your training to test! This is a mission of the utmost importance. Complete this and you are assured a spot on our team.
      
      TASK: Our intelligence indicates that somewhere in your computer is an image file that is vital to our organization. This image has a weird name - we know for certain that it contains the word `cowFJS` in it. The file is somewhere on this system, but it is _not_ in your home directory. Through our sources we also know that there is another crucial file in that folder. Copy _both_ the image and second file to a new folder in your home directory, called `final-mission`. Finally, create a new file called `cowsay.file` in the folder, `final-mission`, with the contents of the `cowsay` man file in it.
  
  Question1: &question1
    question_num: 1
    type: question
    content: How many subdirectories are in your home directory? (Not including hidden directories)
    options: []
    answers:
      - value: "7"
        answer_type: String
        points_possible: 15
    points_possible: 15
  Question2: &question2
    question_num: 2
    type: question
    content: In your home directory there is subdirectory named followMe. Travel into the directory as far as you can go. At the end there is a file. What is the name of the file?
    options: []
    answers:
      - value: "$RANDOM"
        answer_type: String
        points_possible: 15
    points_possible: 15
  Question3: &question3
    question_num: 3
    type: question
    content: What does the line below NAME on the man page for the "file" command say?
    options: []
    answers:
      - value: file â€” determine file type
        answer_type: String
        points_possible: 15
      - value: file - determine file type
        answer_type: String
        points_possible: 15
    points_possible: 15
  Question4: &question4
    question_num: 4
    type: question
    content: What is the secret code in the text file in the stuff directory? (If you try and read a non-ASCII text file, something WILL break!!)
    options: []
    answers:
      - value: "$RANDOM"
        answer_type: String
        points_possible: 15
    points_possible: 15
  Question5: &question5
    question_num: 5
    type: question
    content: What command or list of commands did you use to create a file with the contents of the three files in the textfiles directory? (Endless approaches, this question will not be graded automatically)
    options: []
    answers:
      - value: ""
        answer_type: Essay
        points_possible: 15
    points_possible: 15
  Question6: &question6
    question_num: 6
    type: question
    content: What are the filenames (with extensions) of the six image files hidden in your home directory that contain edurange in the name? Please enter the filesnames as a comma separated list, e.g. ("file1.jpg, file2.png, file3.gif").
    options: []
    answers:
      - value: edurange5meow.JPG
        answer_type: String
        points_possible: 3
      - value: edurange001.gif
        answer_type: String
        points_possible: 3
      - value: 4edurange.jpeg
        answer_type: String
        points_possible: 3
      - value: edurange006weeeeeee.png
        answer_type: String
        points_possible: 3
      - value: 002edurange.jpg
        answer_type: String
        points_possible: 3
      - value: edurange3.GIF
        answer_type: String
        points_possible: 3
    points_possible: 18
  Question7: &question7
    question_num: 7
    type: question
    content: What is the absolute path of the directory containing the file that has 'cowFJS' in its name? (Just the path to the directory, no filename)
    options: []
    answers:
      - value: "/usr/special/secrets/"
        answer_type: String
        points_possible: 20
    points_possible: 20

# Order of content using aliases
studentGuide:
  chapters:
    - chapter_num: 1
      title: Welcome to Cybersec
      content_array:
        - *reading1
        - *reading2
    - chapter_num: 2
      title: Using the Terminal Commands in the Linux shell
      content_array:
        - *reading3
    - chapter_num: 3
      title: Linux File System
      content_array:
        - *reading4
        - *reading5
        - *reading6
    - chapter_num: 4
      title: Commands
      content_array:
        - *reading7
        - *reading8
        - *reading9
        - *question1
        - *question2
        - *reading10
        - *reading11
        - *question3
        - *reading12
        - *reading13
        - *reading14
    - chapter_num: 5
      title: File Types
      content_array:
        - *reading15
        - *reading16
        - *reading17
        - *question4
    - chapter_num: 6
      title: Case Sensitivity, `touch`, `echo`, and Input/Output Redirection
      content_array:
        - *reading18
        - *question5
        - *reading19
        - *question6
    - chapter_num: 7
      title: More Commands
      content_array:
        - *reading20
        - *question7
        
      
