ScenarioTitle: Getting Started
contentDefinitions:
  Reading1: &Reading1
    type: reading
    content: "### How to Connect\nUse the credentials and IP address provided in the\
      \ bottom left of this \nscenario page to SSH into the exercise. \n\nSSH is an\
      \ important network protocol that is used in most of our \nscenarios, so you\
      \ need some minimal knowledge on how to use it on your OS.\n\nIf you need a\
      \ backup, you can use the WebSSH button also in the bottom \nleft, but it is\
      \ missing many convenience features provided by more \nstandard terminals, so\
      \ don't use it unless instructed to do so."
  Question1: &Question1
    type: question
    content: What is the full "FLAG{...}" string that is provided after ssh-ing in?
    comment: ''
    answers:
    - answer_type: String
      value: FLAG{WELCOME}
      points_possible: 15
    points_possible: 15
    options: []
    question_num: 1
  Reading2: &Reading2
    type: reading
    content: "## Using the Terminal Commands in the Unix shell\n\nWhen using your\
      \ computer (Mac, Linux, Windows), you often need to interact\nwith the operating\
      \ system to access shared resources like disk storage \nor external hardware.\n\
      \n- A \u201C*shell*\u201D is a program that allows you to interact with the\
      \ OS in text mode, also called a \u201C***c**ommand **l**ine **i**nterface*\u201D\
      \ or CLI.\n\n\u201C***G**raphical **u**ser **i**nterfaces*\u201D (GUI) are generally\
      \ designed to\nsimplify and expedite user interactions. However, they can sometimes\
      \ restrict\nthe user beyond that requirement. Text-based interfaces are more\
      \ complex by\ncomparison, but they allow more freedom.\n\n- The device and/or\
      \ software that connects you to the command line can sometimes be called a \u201C\
      *terminal*\u201D.\n- The software that provides the command line interface itself\
      \ on the host computer is called the \u201C*shell*\u201D because it wraps around\
      \ the operating system.\n\n#### bash and Other Shells\nIn eduRange we use the\
      \ \u201C***B**ourne **A**gain **Sh**ell*\u201D, \u201C`bash`\u201D.\n\nyou can\
      \ look up the history of bash and other shells online\n\n## man pages and apropos\n\
      \u201C*`man` pages*\" is short for \u201C**man**ual\u201D pages. These are text\
      \ documents with lots of information on things installed on your system. \u201C\
      `man`\u201D is a command for reading the `man` pages.\n\nThe first command we\
      \ explore is `ls`? Let's find that `man` page.\n\nType:\n\n```sh\nman ls\n```\n\
      \ To exit `man`, just type \u201C`q`\u201D to \u201C***q**uit*\u201D."
  Reading3: &Reading3
    type: reading
    content: "- `man` pages are an important resource because they are specific to\
      \ the software actually installed on the system you\u2019re currently using.\n\
      - Some commands have different behavior depending on their version.\n- An online\
      \ resource may or may not have information specific to your system, but `man`\
      \ always contains documentation for what you have installed.\n\nThere are even\
      \ entirely different implementations of some programs - including shells, as\
      \ mentioned earlier. When it comes to shell information remember to ask `man`\
      \ about the right shell. In eduRange that will be `man bash`, but the default\
      \ shell on your own systems might vary.\n\n### man Page Key Points: SYNOPSIS\
      \ and EXAMPLES\n      \nFor many commands, there\u2019s an overwhelming amount\
      \ of information in the `man` pages. The pages are divided up into sections.\n\
      \nMost every `man` page includes two particularly useful sections:\n- A *synopsis*\
      \ showing how the command is written in the format discussed earlier, and \n\
      - A series of *examples* showing exact instances of the command in particular\
      \ uses.\n\nWhen in a `man` page, you can type a slash \u201C`/`\u201D to search\
      \ for text.\n\nThe headers are in all capitals, so after opening up a particular\
      \ page, to search for the synopsis you\u2019d type\n\n```sh\n/SYNOPSIS\n```\n\
      and then hit enter.\n\n- `man` will highlight all instances of the text \u201C\
      `SYNOPSIS`\u201D.\n- Typing \u201C`n`\u201D will bring you to the \u201C**n**ext\u201D\
      \ search result.\n- \u201C`b`\u201D will take you \u201C**b**ack\u201D.\n- Remember,\
      \ \u201C`q`\u201D to \u201C**q**uit\u201D when you\u2019re done.\n\nWhat happens\
      \ when your search fails?\nTry searching for the \u201C`EXAMPLES`\u201D section\
      \ in `man ls`.\n\nAs you read man pages you will notice that there are many\
      \ variations on\nsome commands. These are expressed as options and are usually\
      \ preceeded by \na \"-\"\n\n### apropos\t\nBecause the command names can be\
      \ arcane, it is helpful to know about the `apropos`\ncommand which searches\
      \ through all of the man pages.\nTry\n\n  ```sh\n  apropos rename\n  ```\nWhat\
      \ command best fits? Use man to find out more about it."
  Reading4: &Reading4
    type: reading
    content: "\u201C*`man` pages*\" is short for \u201C**man**ual\u201D pages. These\
      \ are text documents\nwith lots of information on things installed on your system.\
      \ \u201C`man`\u201D is a\ncommand for reading the `man` pages.\n\nTry opening\
      \ the \"`man`\" page for `ls` using:\n```\nman ls\n```\nTo exit `man`, just\
      \ type \"`q`\" to \u201C***q**uit*\u201D.\n\n### `man` Page Key Points: SYNOPSIS\
      \ and EXAMPLES\n\nFor many commands, there\u2019s an overwhelming amount of\
      \ information in the `man` pages. The pages are divided up into sections.\n\n\
      Most every `man` page includes two particularly useful sections:\n\n- A *synopsis*\
      \ showing how the command is written in the format discussed earlier, and \n\
      - A series of *examples* showing exact instances of the command in particular\
      \ uses.\n\nWhen in a `man` page, you can type a slash \u201C`/`\u201D to search\
      \ for text.\n\nThe headers are in all capitals, so after opening up a particular\
      \ page, to search for the synopsis you\u2019d type:\n\n```sh\n/SYNOPSIS\n```\n\
      \nand then hit enter.\n\n- `man` will highlight all instances of the text \u201C\
      `SYNOPSIS`\u201D.\n- Typing \u201C`n`\u201D will bring you to the \u201C**n**ext\u201D\
      \ search result.\n- \u201C`b`\u201D will take you \u201C**b**ack\u201D.\n- Remember,\
      \ \u201C`q`\u201D to \u201C**q**uit\u201D when you\u2019re done."
  Question2: &Question2
    type: question
    content: "Open the `man` page for `cp`. What option would provide verbose output?\
      \ It\u2019s worth noting that many commands provide an option with this name,\
      \ not just `cp`."
    comment: ''
    answers:
    - answer_type: String
      value: -v
      points_possible: 15
    points_possible: 15
    options: []
    question_num: 2
  Reading5: &Reading5
    type: reading
    content: "- `man` pages are an important resource because they are specific to\
      \ the software actually installed on the system you\u2019re currently using.\n\
      - Some commands have different behavior depending on their version.\n- An online\
      \ resource may or may not have information specific to your system, but `man`\
      \ always contains documentation for what you have installed."
  Reading6: &Reading6
    type: reading
    content: "# Unix Filesystems\n\nUnix folders and files are arranged in a tree\
      \ structure, where the root node is the beginning of a path to any file in the\
      \ entire file system.\n\n- The \u201C*root node*\u201D (or \u201C*root directory*\u201D\
      ) of the filesystem is written with the slash character \u201C`/`\u201D.\n-\
      \ The leaves of the tree are the individual files.\n- This means that if you\
      \ want to search the entire file system, you need to start at `/`.\n\nIt is\
      \ common to represent the filesystem tree in a manner like this:\n```\n/\n\u251C\
      \u2500\u2500 bin\n\u251C\u2500\u2500 dev\n\u251C\u2500\u2500 etc\n\u251C\u2500\
      \u2500 home\n\u2502\_\_ \u251C\u2500\u2500 user1\n\u2502\_\_ \u251C\u2500\u2500\
      \ user2\n\u2502\_\_ \u2514\u2500\u2500 ...\n\u251C\u2500\u2500 mnt\n\u251C\u2500\
      \u2500 root\n\u251C\u2500\u2500 usr\n\u2502\_\_ \u251C\u2500\u2500 bin\n\u2502\
      \_\_ \u2514\u2500\u2500 ...\n\u251C\u2500\u2500 var\n\u2514\u2500\u2500 ...\n\
      ```\n\n### Exploring the Filesystem with ls\n\nDue to its tree structure, the\
      \ locations of files stored in a filesystem are called paths. A \u201Cpath\u201D\
      \ can refer to both a file or a directory. \nWhen you begin a shell session,\
      \ the directory designated for you on the system is called your \u201Chome directory\u201D\
      .\n\nTo see which files and directories are listed in your home directory, type:\n\
      ```\nls\n```\n\nYou should see something similar to:\n\n```\nbar           \
      \    followMe         navigation_check.txt  you_cant_read_me.txt\ncomms_record.txt\
      \  for_hire.txt     permit_requests\nfile-practice     i                radio_logs.txt\n\
      final-task        multimedia-data  toLearn\n```\n\nThese are the contents of\
      \ your home directory. ls is short for \u201Clist\u201D (files) and can be used\
      \ in other parts of the file system to display files \nand directories in your\
      \ \u201Ccurrent working directory\u201D as well."
  Question3: &Question3
    type: question
    content: How many files and directories are in your home directory? (EXCLUDING
      hidden files and . or ..)
    comment: ''
    answers:
    - answer_type: String
      value: '13'
      points_possible: 15
    points_possible: 15
    options: []
    question_num: 3
  Reading7: &Reading7
    type: reading
    content: "## Commands and Navigation - pwd, cd, ls\n\nNow, try:\n\n```\nls /\n\
      ```\n\nIn this case, `ls` is the command you\u2019re invoking, and \u201C/\u201D\
      \ is a path. Specifically, \u201C/\u201D will show you the contents of the root\
      \ directory.\n\n`ls` doesn\u2019t modify any files or your environment, so you\
      \ are free to look around the filesystem without worry. There will be some paths\
      \ that you don\u2019t have permission to see, but ls can be a useful tool in\
      \ navigating the file system.\n\n### pwd\npwd stands for \"print working directory\"\
      \ - it will tell you where you are within the filesystem, your current working\
      \ directory.\nIf you type:\n`pwd`\n\nYou should see something similar to `/home/<foo>`\
      \ where \u201Cfoo\u201D is your username.\n\n### cd\n\u201Ccd\u201D stands for\
      \ \u201Cchange directory\u201D, meaning to navigate to a different folder. If\
      \ you are ever lost in the filesystem, cd by itself will take you back to your\
      \ home directory.\nEnter each of the following, one at a time. If you use ls\
      \ after each, you\u2019ll see that your working directory is changing:\n```\n\
      cd /\ncd /root\ncd\ncd ../\n```\n\n    - The first command sends you to the\
      \ root of your entire file system.\n    - The second command sends you to the\
      \ root user's home directory, but notice that you don't have permissions to\
      \ cd to that directory.\n    - The third command sends you back to your home\
      \ directory because no path was specified with the command.\n    - The fourth\
      \ command sends you backwards (up) a level in the file system using .. .\n\n\
      ### ls and File Access Control\nAs mentioned before, \u201Cls\u201D \u201Clists\u201D\
      \ files and directories. When using the command line, \u201Coptions\u201D allow\
      \ you to tell the computer how you want it to output information. These are\
      \ usually shown with a single hyphen (-) for one letter options or a double\
      \ hyphen (--) for longer options. Let\u2019s use ls to learn more about our\
      \ file system.\n\nFirst, make sure you\u2019ve returned to your home directory\
      \ by entering:\n`cd`\n\nThen, try:\n\n`ls -la`\n\nThat's a lot of info! What\
      \ you see are all the files and directories in the directory (folder) where\
      \ you are currently working, including files that were hidden before!\nThere\u2019\
      s also a lot more information than before, so rather than a list of filenames,\
      \ we get a whole table with one file per row and columns with additional information\
      \ about each.\n    - The first column is a string of characters indicating the\
      \ type of file followed by its \u201Cpermissions\u201D, settings that determine\
      \ who is allowed to use files and what they can do to them.\n    - A \u2013\
      \ at the beginning means a regular file. d is a directory (folder). l is a link.\
      \ The rest of the string is either - or r, w, and x.\n    - r here stands for\
      \ \"read\", w for \"write\" and x for \"execute\". - in the position of one\
      \ of the letters means that type of permission is denied.\n    - Permissions\
      \ can be set based for 1) the user owning the file, 2) users in the group owning\
      \ the file, or 3) all other users, and so the permission string repeats each\
      \ rwx position three times.\n    - The second column is the number of links\
      \ or sub-directories in the directory, if this file is a directory. (In Unix,\
      \ we tend to think of all things as files; even directories are just a special\
      \ type of file.)\n    - The third column is the user that owns the file.\n \
      \   - The fourth is the group that owns the file.\n    - The fifth is the size\
      \ of the file.\n    - The sixth is the date and time it was last edited.\n \
      \   - And finally, the file name in the seventh column, on the far right.\n\
      Let\u2019s learn more about what we can do with ls.\n\nType:\n`man ls`\n\nWhen\
      \ we wrote `ls -la`, \u201C-la\u201D was a collection of options, sometimes\
      \ also informally called \u201Cflags\u201D. Options like this can be combined\
      \ without spaces to give the computer multiple instructions at once.\nLet's\
      \ learn what \u201Cl\u201D and \u201Ca\u201D mean.\n\n### Locate Option \"-l\"\
      \nWithin the man page for ls, search for the \u201C-l\u201D option. Remember\
      \ that to search inside a man page, you can use \u201C/\u201D.\nType:\n`/-l`\n\
      \nYou should see the page move to the first occurrence of \u201C-l\u201D and\
      \ that \u201C-l\u201D is highlighted. Remember, you can jump to the next matching\
      \ result by hitting \u201Cn\u201D (for \u201Cnext\u201D).\nPress \u201Cn\u201D\
      \ until you see \u201C-l\u201D highlighted at the beginning of the line; this\
      \ is where the option is defined and will be above the line for \u201C-L\u201D\
      .\nAs we can see, the \u201Clong\u201D listing option shows results with details\
      \ in columns.\nLocate Option \"-a\"\nNow, let\u2019s find information about\
      \ \u201C-a\u201D. Type:\n`/-a`\n\nHit \u201Cn\u201D till you can't go any further.\
      \ Now hit \u201Cb\u201D (which stands for \u201Cback\u201D) until you find the\
      \ entry for \u201C-a\u201D (which is above \u201C-A\u201D).\nRemember when we\
      \ mentioned that files can be hidden? By default, ls ignores file names that\
      \ start with .. The \u201Call\u201D option specifies that hidden files, which\
      \ start with . like .profile, should be displayed.\nHidden files aren\u2019\
      t hidden in the \u201Csecret\u201D sense as much as they are just \u201Chidden\
      \ from view\u201D to reduce visual clutter. Hidden files are often used to store\
      \ configuration and other information that might repeat in many places and would\
      \ be distracting if it showed up all the time.\n\n### Globbing With ls\nIf there\
      \ are a lot of files in a directory, it can be useful to restrict what ls looks\
      \ at to a subset of those files. The shell allows you to find things in your\
      \ directory following a certain pattern. This is called \u201Cglobbing\u201D\
      . For example, if you are only interested in files with the extension \u201C\
      .jpg\u201D, you can use:\n`ls *.jpg`\nThe \u201C*\u201D \u201Cstar\u201D is\
      \ a special character called a \u201Cwildcard\u201D. Wildcards represent a part\
      \ of the pattern that could vary. * specifically means that any string of character(s)\
      \ could go in that position of the glob pattern. We\u2019ll discuss and use\
      \ globs more later on.\nNow that we have learned a few basic commands, try to\
      \ use this information to learn more about your filesystem."
  Question4: &Question4
    type: question
    content: What is the name of the hidden file in your home directory that is over
      1 megabyte?
    comment: ''
    answers:
    - answer_type: String
      value: .lasers.wav
      points_possible: 15
    points_possible: 15
    options: []
    question_num: 4
  Reading8: &Reading8
    type: reading
    content: "## Naming Conventions\n\nInformation about your computer and users can\
      \ be found by exploring the filesystem. Here are common names for the places\
      \ that information is stored:\n\n    - /, as mentioned earlier, might be called\
      \ just \u201Croot\u201D or more specifically the \u201Croot node\u201D or \u201C\
      root directory\u201D.\n    - /home contains the \u201Chome\u201D directories\
      \ for all users, other than root. (On Mac OS, desktop users\u2019 homes are\
      \ in /Users instead.)\n    - /usr contains common data for resources provided\
      \ to all (particularly unprivileged) \u201Cusers\u201D, such as libraries and\
      \ the files that man uses to deliver documentation. Many commands are stored\
      \ here as well.\n    - /usr/bin is where the \u201Cbinary\u201D executables\
      \ in /usr are stored specifically.\n    - /bin also contains binary executables,\
      \ but if you ls /bin, you\u2019ll see Reading11: &reading11\nThere are a number\
      \ of other top-level directories related to system operation that are outside\
      \ the scope of this first lesson. /etc stores shared data like configuration\
      \ files; /dev and /mnt are related to how the operating system manages hardware.\n\
      You won\u2019t need to interact with these other areas today. For now, be aware\
      \ that they\u2019re system critical and not to be changed unless you know what\
      \ you\u2019re doing.\n\n### Navigation: Long and Complicated Paths\nTyping paths\
      \ can be cumbersome. Shells provide shortcuts to help.\nA \u201C.\u201D (\u201C\
      dot\u201D) is short for your \u201Ccurrent working directory\u201D. For now\
      \ your current working directory will be the same as your home directory. \n\
      Here are some examples to demonstrate how you can navigate in the file system\
      \ using what we have learned:\n    - If the current working directory is \u201C\
      /foo/bar\u201D, then if you type \u201C./baz\u201D in the command line the current\
      \ working directory will become \u201C/foo/bar/baz\u201D.\n    - If you wanted\
      \ to return to the parent directory of the current working directory (the directory\
      \ backwards/up a level), you would type \u201C..\u201D (\u201Cdot-dot\u201D\
      ).\n    - \u201C/..\u201D is one exception - / is the root of all nodes, including\
      \ itself, so \u201C/..\u201D is interpreted as just \u201C/\u201D.\n    - .\
      \ and .. only have these meanings when they are used as directory names by themselves.\
      \ For example: \u201C/..foo\u201D means \u201Cthe file or directory called \u2018\
      ..foo\u2019 in our current location\u201D. \u201C../foo\u201D means \u201Cthe\
      \ file or directory called \u2018foo\u2019 in the parent directory of our current\
      \ location.\u201D\n    - Another shortcut is \u201C~\u201D (\u201Ctilde\u201D\
      ). Used by itself, ~ is interpreted as the path to your home directory.\n\n\
      ### Tab Completion\nThe shell also has an auto-completion feature. Modern auto-correct\
      \ algorithms share common ancestors with shell \u201Ctab completion\u201D.\n\
      While typing a path in the command line, you can hit tab to complete a path\
      \ without having to type it all out. If the path you\u2019ve typed has more\
      \ than one possible completion, the shell will prompt you with a list of possibilities.\
      \ If there are a lot of possibilities the shell may warn you that it\u2019s\
      \ about to print a big list. You can then add to your command input to narrow\
      \ the available choices.\n\n### root Has More Than One Meaning\nIn a Unix system,\
      \ control over the root directory (or root \u201Cnode\u201D) is protected by\
      \ restricting it to a single user. Early systems engineers chose to call this\
      \ user \u201Croot\u201D, which became a convention. Because this user has control\
      \ of the root node, and thus anything stored on the system at all, the root\
      \ user became the de facto authority over most things security-related. (In\
      \ Windows, this user is instead called \u201Cadministrator\u201D by default,\
      \ but its role is similar.)\nWith both the root user and root node being important\
      \ vocabulary for system administration, you'll come across ambiguities sometimes.\n\
      \    - The \u201Croot\u201D (node), signified by just \u201C/\u201D, is the\
      \ beginning of all the system's files.\n    - But if you were to log in as the\
      \ \u201Croot\u201D user, your home directory would be the folder \u201C/root\u201D\
      , not the root node, \u201C/\u201D.\n    - root\u2019s home directory \u201C\
      /root\u201D is not to be confused with the formal root directory \u201C/\u201D\
      , the beginning of the path to all the files, even though they both might be\
      \ casually read as \u201Croot directory\u201D aloud.\nTo avoid confusion, it\
      \ is best to call \u201C/root\u201D \u201Cslash-root\u201D or something like\
      \ \u201Croot\u2019s home\u201D. Reserve \u201Croot\u201D itself to refer to\
      \ the path \u201C/\u201D or the user \u201Croot\u201D exclusively, specifying\
      \ whether you mean a path or user when it isn\u2019t obvious - this is generally\
      \ how you can expect the terms to be used.\n\n### About root Privileges and\
      \ Security\nA root user is someone who has access to everything on the computer.\
      \ They could even delete everything on the computer.\nWhen setting up your own\
      \ systems, be aware of how the root user and privileges are configured and controlled.\
      \ Some systems might not ask to set up credentials initially, leaving the password\
      \ for root set to a default value after install. In cybersecurity, not changing\
      \ this default password can have huge implications.\nYou won\u2019t be using\
      \ protected parts of the system in this exercise, but there are many security\
      \ exploits related to them that you\u2019ll likely encounter in the future."
  Question5: &Question5
    type: question
    content: In your home directory there is subdirectory named followMe. Travel into
      the directory as far as you can go. At the end there is a file. What is the
      name of the file?
    comment: ''
    answers:
    - answer_type: String
      value: $RANDOM
      points_possible: 15
    points_possible: 15
    options: []
    question_num: 5
  Reading9: &Reading9
    type: reading
    content: "## Commands: mv, cp, and mkdir\n\n### mv\nmv is used to move or rename\
      \ files and directories in the filesystem. As we discovered earlier, there is\
      \ no separate command to rename a file, it is simply mv\u2019ed from one name\
      \ to another in the same directory.\n\n### cp\ncp is used to \u201Ccopy\u201D\
      \ a file to a new location.\n\n### mkdir\nmkdir is short for \u201Cmake directory\u201D\
      \ and does just what you\u2019d think.\nLet\u2019s try out using mkdir!"
  Question6: &Question6
    type: question
    content: In the file-practice directory, rename file1.txt to renamed_file1.txt
      and copy file2.txt to copied_file2.txt. What is the output of 'wrangle_flag'
      if you run it as a command?
    comment: ''
    answers:
    - answer_type: String
      value: $RANDOM
      points_possible: 15
    points_possible: 15
    options: []
    question_num: 6
  Reading10: &Reading10
    type: reading
    content: "### `chmod`\n\n`chmod` comes from \u201C***ch****ange* ***mod****e*\u201D\
      \ and alters the *permissions* of files and directories.\n\n- \u201C*Permissions*\u201D\
      , mentioned earlier with regard to `ls -l`, are the settings on each file which\
      \ determine who can use that file and how.\n\n`chmod` can be used in many ways\
      \ so it takes a little more explaining than earlier commands.\n\nIf you look\
      \ at `man chmod` you\u2019ll see that `chmod` accepts several different types\
      \ of input, and has a lot more features than just the basic nine permissions.\
      \ The essential points are:\n\n- `chmod` takes a mode and a file: `chmod mode\
      \ file`\n- \u201C`file`\u201D is a path to the file you\u2019d like to change\
      \ (directories are files too)\n- \u201C`mode`\u201D can be written a number\
      \ of ways; we\u2019ll use \u201C*symbolic mode*\u201D here but you\u2019ll likely\
      \ see \u201C*absolute mode*\u201D (a numeric representation) in older examples\n\
      \n*Symbolic* permission modes have a lot of shortcuts associated with them but\
      \ we\u2019ll focus on the basics here.\n\n- The mode should begin with any combination\
      \ of \u201C`u`\u201D for user, \u201C`g`\u201D for group and \u201C`o`\u201D\
      \ for other\n- Then follows an operator (just one): equals \u201C`=`\u201D assigns\
      \ precisely the following permissions to the user/group/other category, plus\
      \ \u201C`+`\u201D adds permissions, and minus \u201C`-`\u201D takes them away\n\
      - Then follows a combination of \u201C`r`\u201D for read, \u201C`w`\u201D for\
      \ write, and \u201C`x`\u201D for execute\n\nSo as examples:\nTo add execute\
      \ permission for a user:\n```\nchmod u+x <filename>\n```\n\nTo remove read and\
      \ write permission for the group:\n```\nchmod g-rw <filename>\n```\n\nTo add\
      \ read permission for all roles:\n```\nchmod ugo+r <file>\n```"
  Question7: &Question7
    type: question
    content: Use chmod to make 'you_cant_read_me.txt' in your home directory readable.
      What is the flag it contains?
    comment: ''
    answers:
    - answer_type: String
      value: $RANDOM
      points_possible: 10
    points_possible: 10
    options: []
    question_num: 7
  Reading11: &Reading11
    type: reading
    content: "### Background: File Types\n\nNot all files appear as they really are.\
      \ Just because you see a file named \u201C`foo.png`\u201D does not mean that\
      \ there is PNG image data inside. It could be a text file hiding a secret message,\
      \ or contain harmful executable code, or have been named by mistake.\n\n- File\
      \ extensions are a convention for keeping things organized - not an enforced\
      \ rule or a promise about what the file actually is. Whoever creates the file\
      \ chooses its name and extension, however they like.\n\nSo, how can you get\
      \ more information on what a file actually contains? One way is with the \u201C\
      `file`\u201D command!\n\n### `file`\n\nTo find out what a **file** really is\
      \ regardless of its extension, you could examine the byte data inside, but `file`\
      \ can often do this for us automatically.\n\nTry using \"`file`\" to inspect\
      \ the files in the \"multimedia-data\" directory."
  Question8: &Question8
    type: question
    content: In the multimedia-content directory, which file is actually an OpenSSH
      RSA public key?
    comment: ''
    answers:
    - answer_type: String
      value: staff_schedule2.docx
      points_possible: 10
    points_possible: 10
    options: []
    question_num: 8
  Reading12: &Reading12
    type: reading
    content: "### `find`\n\n\u201C`find`\u201D does just what it sounds like - helps\
      \ you \u201C***find***\u201D files on the filesystem. `find` takes different\
      \ qualities that define what you\u2019re looking for, and does the repetitive\
      \ work of searching each directory in the tree work for you.\n\nAn example:\n\
      \n```sh\nfind . *foo*\n```\n\n- First the \u201C`.`\u201D argument is a path\
      \ that tells `find` where to start the search; in this case it's the current\
      \ working directory. (Remember the dot is shorthand for the directory where\
      \ you are. We could also give a relative path like \u201C`bar`\u201D or an absolute\
      \ path from the root \u201C`/`\u201D. Wherever you\u2019d like to search from.)\n\
      - Second, we provide an expression for a filename. Here we\u2019ve provided\
      \ a glob pattern, \u201C`*foo*`\u201D. The `*`s on either side mean that we\
      \ want everything with `foo` in the name, regardless of what is around it. The\
      \ `*` can be any string, including an empty string, so \u201C`foo`\u201D, \u201C\
      `myfoo`\u201D, \u201C`foobar`\u201D and \u201C`space food vendors.txt`\u201D\
      \ would all be valid matches."
  Question9: &Question9
    type: question
    content: What is the full filename of the image containing top_secret, with the
      extension of .png?
    comment: ''
    answers:
    - answer_type: String
      value: do_not_share_top_secret.png
      points_possible: 6
    points_possible: 6
    options: []
    question_num: 9
  Question10: &Question10
    type: question
    content: What is the full filename of the image containing top_secret, with the
      extension of .gif?
    comment: ''
    answers:
    - answer_type: String
      value: still_top_secret.gif
      points_possible: 6
    points_possible: 6
    options: []
    question_num: 10
  Question11: &Question11
    type: question
    content: What is the full filename of the file containing 'top_secret' and 'meow'?
    comment: ''
    answers:
    - answer_type: String
      value: top_secret5meow.JPG
      points_possible: 6
    points_possible: 6
    options: []
    question_num: 11
  Reading13: &Reading13
    type: reading
    content: "# More File Utilities\n\nSo far we\u2019ve looked at commands that browse\
      \ and alter the filesystem, where data is saved. Next we\u2019ll introduce some\
      \ command line programs for reading and writing the data inside files, as well\
      \ as some shell features that give us greater power over storing and manipulating\
      \ that data.\n\n## Commands\n\nFirst we\u2019ll take a look at some of the essential\
      \ commands. Another term for CLI commands is \u201C*utilities*\u201D - you may\
      \ have seen it used already in the `man` pages.\n\n### `cat`\n\nLet's learn\
      \ a new command, `cat`. `cat` prints out the text from a file.\n`cat` is short\
      \ for \u201Ccon**cat**enate\u201D, which means \u201Cto connect, join or arrange\u201D\
      . If given more than one file argument, `cat` will print out each one in the\
      \ order they\u2019re specified, joining them (on the printed output, at least).\n\
      But if you just want to print out a text file to the console, you can simply\
      \ `cat <filename>`.\n\n### `touch`\n\n\u201C`touch`\u201D is a command that\
      \ \"*touches*\" a file. If the file exists `touch` updates its modified date.\
      \ If the file does not exist, then an empty file will be created at that location.\n\
      \nWhy is this useful? There are many other ways to create new files, particularly\
      \ when saving new data from other programs. But `touch` may be convenient when\
      \ you only need an empty file.\n\nThen, why does it change the modification\
      \ date? This is because `touch` is actually more often used as a scripting tool,\
      \ when processing and organizing files for larger tasks. You may not need to\
      \ `touch` files manually very often, but chances are you\u2019ll come across\
      \ its use in a script.\n\n\n### `echo`\n\n`echo` is a simple and versatile command.\
      \ It can evaluate an expression and write it to the terminal standard output\
      \ (STDOUT, which we'll explain further below). You can use this in many different\
      \ ways. A simple example is where the expression is a string literal.\n\nIf\
      \ you type:\n\n```sh\n[username]@[host]$ echo \"This is echoed\"\nThis is echoed\n\
      ```\n\nYou will see that it was repeated back to you.\n\n### `md5sum`\n\n\u201C\
      `md5sum`\u201D is way to determine whether a file has been modified.\n\nSince\
      \ it is only a function of the file contents, it can also be used to check whether\
      \ two files have the same contents.\n\n`md5sum` is called a \u201C*cryptographic\
      \ hash function*\u201D. A \u201C*hash function*\u201D maps a large, possibly\
      \ infinite set of values (in this case, all possible file contents) to a smaller\
      \ set of values of a fixed size (here, 128 bits). A *cryptographic* hash function\
      \ does so in such a way that it is hard to construct an input that maps to a\
      \ given output - thus it is not easy to infer the content of the file just by\
      \ its MD5 hash.\n\nIf security is described as a balance between confidentiality,\
      \ integrity and availability, commands like \u2018md5sum\u2019 help to provide\
      \ the \u201C*integrity*\u201D property.\n\n## Pager Utilities\n\n\u201C*Pagers*\u201D\
      \ are a group of command line utilities that allows users to view text one page\
      \ at a time. This is particularly useful when dealing with output that is too\
      \ large to fit on a single screen, as it prevents the information from scrolling\
      \ past too quickly to read.\n\n### `less` and `more`\n\nThe commands \u201C\
      `less`\u201D and \"*more*\" are used to open larger files, page by page. they\
      \ allow you more tools to read a file in an organized fashion than you might\
      \ have just by scrolling through your terminal output.\n\nLike `man` pages,\
      \ you can use `q` to exit them. (Fun fact, `man` is actually built on top of\
      \ `more`)\n\n### `tail`\n\nThe \u201C`tail`\u201D command is used to display\
      \ the last part of a file. By default, it shows the last ten lines, but you\
      \ can customize its behavior using various options.\n\n- Custom line count:\
      \ Use the `-n` option to specify the number of lines to display.\n- Real-time\
      \ monitoring: With the `-f` option, `tail` can follow a file, displaying new\
      \ lines as they are added. Run this way `tail` will continue even when it reaches\
      \ the end of the file, waiting to print additional new lines. Press ^C to stop\
      \ monitoring and return to the shell.\n\n`tail` is convenient when you don\u2019\
      t need or want to scroll manually. `less` can follow the tail of a file too,\
      \ but it takes a few more keystrokes."
  Question12: &Question12
    type: question
    content: What is the very first line of "navigation_check.txt" in your home directory?
    comment: ''
    answers:
    - answer_type: String
      value: 'Begin Nav Check: Z94732'
      points_possible: 20
    points_possible: 20
    options: []
    question_num: 12
  Question13: &Question13
    type: question
    content: What is the very last line of "navigation_check.txt" in your home directory?
    comment: ''
    answers:
    - answer_type: String
      value: 'Date: 8764.56.14'
      points_possible: 20
    points_possible: 20
    options: []
    question_num: 13
  Question14: &Question14
    type: question
    content: 'In the "permit_request" directory in your home directory, which file
      has an md5sum hash that ends with "e3e3"?:'
    comment: ''
    answers:
    - answer_type: String
      value: req9A323.txt
      points_possible: 20
    points_possible: 20
    options: []
    question_num: 14
  Reading14: &Reading14
    type: reading
    content: "## Text Editors\n\nThere are many ways to create and modify text files\
      \ on the command line. When you need all the features of an interactive text\
      \ editor, there are a number of choices.\n\nWe use the minimal editor \u201C\
      `nano`\u201D for most examples in eduRange unless otherwise stated. In these\
      \ exercises, `nano` is all you\u2019ll need, but we\u2019ll mention a few common\
      \ alternatives by name so you know them when you see them.\n\n### `nano`\n\n\
      Like the name implies, \u201C`nano`\u201D is a small text editor. Called with\
      \ no arguments, it opens an editor session for an unnamed file; when you go\
      \ to save, it will allow you to specify a path to write out to. Called with\
      \ an argument, `nano` attempts to open and read the file at the path provided.\
      \ If no file exists, a new one will be created when saving.\n\nAs with `man`\
      \ or `less`, once `nano` starts, it is controlled differently than the shell.\
      \ If you type, your text will be entered into the file to be written. Text is\
      \ inserted at the blinking cursor, which can be moved around with arrow keys.\
      \ At the bottom of the screen is a summary of command keystrokes. (Remember,\
      \ \u201C`^`\u201D is shorthand for the Control key modifier.)\n\nThe most important\
      \ are:\n\n- `^O` to \u201C*write **o**ut*\u201D (when you type you\u2019re writing\
      \ to a temporary buffer; it doesn\u2019t save to the actual file until you write\
      \ out)\n- `^X` to \u201C*e**x**it*\u201D\n- `^G` to \u201C***g**et help*\u201D\
      \ if you\u2019re curious about the others\n\nThe keystrokes are case-insensitive.\n\
      \n### `vim` and `vi`\n\nYou\u2019ll probably come across references to `vim`\
      \ or its predecessor `vi`. These have powerful tools related to searching and\
      \ batch editing files, but we won\u2019t have use for those features in this\
      \ exercise.\n\nIf you find yourself accidentally stuck in `vim` or `vi`, hit\
      \ Escape, then type `:qa!` and press enter to forcefully exit.\n\nVim can be\
      \ very useful and productive, but it has a steep learning curve for all of its\
      \ hotkeys."
  Reading15: &Reading15
    type: reading
    content: "# Redirection, Filters and Command Composition\n\n## Input/Output Redirection\n\
      \nRedirection operators - written with angle brackets like \u201C`>`\u201D and\
      \ \u201C`<`\u201D - are used to write the output of a command to a file or a\
      \ file to the input of a command. They have many uses.\n\n### Output Redirection\
      \ With `>` and `>>`\n\nThe \u201C`>`\u201D \u201C*redirects output*\u201D to\
      \ a file. `<command> > <path>` will write a file to \u201C`path`\u201D with\
      \ what is output by the \u201C`command`\u201D on the left hand side. If the\
      \ file already exists, `>` will overwrite the file with what you sent it, in\
      \ effect deleting the previous content. In contrast if you use `>>`, it will\
      \ append what you sent to the end of the file, leaving the existing data intact.\n\
      Let's give it a try. Try:\n\n```sh\necho \"This is cool\" > newfile\ncat newfile\n\
      ```\n\nNext type:\n\n```sh\necho \"This is cool too\" > newfile\ncat newfile\n\
      ```\n\nYou can see that `>` will replace any text with what you send it, while\
      \ `>>` will append to a file. Enter the following:\n\n```sh\necho \"This is\
      \ another thing\" >> secondfile\necho \"Hello World\" >> secondfile\ncat secondfile\n\
      ```\n\nBy using `>>`, both lines were saved to `secondfile`.\n\nNow let's use\
      \ `>>` to combine the two files. Type:\n\n```sh\ncat newfile >> secondfile\n\
      cat secondfile\n```\n\nYou can see the contents of `newfile` appended to the\
      \ end of `secondfile` whereas if you `cat newfile` it will still only have what\
      \ we wrote to it earlier.\n\nRemember, `man bash` (or your particular shell)\
      \ has the documentation on shell language features like redirection.\n\n###\
      \ Tip: Use Redirection to Filter Output Streams\n\nOne useful trick you can\
      \ do with redirection operators is suppress error messages.\n\nSay you have\
      \ a command that produces lots of output (like searching through every sub-directory\
      \ of a big directory with `find`) and sometimes that command produces errors\
      \ (for instance when `find` tries to search a directory for which you don't\
      \ have permissions).\n\nIf you want to just focus on the normal output and suppress\
      \ the error messages that may result, you can add '2>/dev/null' to your command.\
      \ For example:\n\n```sh\nfind . filename 2>/dev/null\n```\n\n### Input and Output\
      \ Redirection With Pipes `|`\n\n`<` and `>` and their relatives help get data\
      \ to and from the command line to the filesystem. The \u201C*pipe*\u201D operator,\
      \ written as \u201C`|`\u201D, takes the output of one command and provides it\
      \ as the input to another command. This allows you to combine the functionality\
      \ of two commands in a single statement, without needing to save the intermediate\
      \ data to file.\n\nConsider a command like: `cat file1.txt file2.txt | more`\n\
      \nThis would pass the contents of both file1.txt and file2.txt into `more`,\
      \ so you could read them both in a combined pager.\n\nNot particularly useful,\
      \ but the idea is you can pass the results of one command into another with\
      \ pipes. \n\nThis becomes very powerful when using commands that \"*Filter*\"\
      \n\n## Filters\n\n\u201C*Filters*\u201D are a category of commands that take\
      \ input (generally text), apply some operation to the input and then print the\
      \ result back out to standard output. Some examples of operations could be sorting,\
      \ searching or counting.\n\n### `sort`\n\nThe \u201C`sort`\u201D command is\
      \ a tool that is used to **sort** lines of text. It\u2019s handy for sorting\
      \ lists that are out of order. It can sort specific columns or entire lines\
      \ alphabetically, numerically, or even in reverse order.\n\n`sort` by default\
      \ will sort the list in alphabetical order according to the first letter of\
      \ each line. Lowercase characters are listed before uppercase letters.\n\n-\
      \ The option `-r` sorts the list in reverse order.\n- The option `-n` will sort\
      \ the list numerically.\n- You can sort a specific column using the option `-k`\
      \ and a numeric argument.\n\nOne use for the `sort` command is to reorder the\
      \ output of a shell command, such as `ls', through the use of a pipe.\n\nThat\
      \ should take the form of `<source> | <filter>' where: \n- \u201C`source`\u201D\
      \ is the `ls` output you want to `sort` and\n- \u201C`filter`\u201D is the `sort`\
      \ command and relevant options."
  Question15: &Question15
    type: question
    content: Take a look at the format of "comms_record.txt" in your home directory.
      Use "`sort`" to reorder the records based on their Stardate.
    comment: ''
    answers:
    - answer_type: String
      value: '4'
      points_possible: 10
    points_possible: 10
    options: []
    question_num: 15
  Reading16: &Reading16
    type: reading
    content: "### `uniq`\n\nThe `uniq` command is used to reduce the number of repeated\
      \ lines that are printed while viewing a file, and, as a result, it is very\
      \ often used with `sort` (using a pipe). \nSuch as: `cat <file> | sort | uniq`\n\
      \nIt only prints the first instance of a line, and does not print repetitions\
      \ of that line that follow after that instance. \nThough it\u2019s called \u201C\
      ***uniq**ue*\u201D, `uniq` doesn\u2019t guarantee to remove all repetitions\
      \ - just those that follow one another."
  Question16: &Question16
    type: question
    content: How many unique jobs are available on the ship according to "for_hire.txt"
      - Remember that `uniq` requires sorted input.
    comment: ''
    answers:
    - answer_type: String
      value: '13'
      points_possible: 10
    points_possible: 10
    options: []
    question_num: 16
  Reading17: &Reading17
    type: reading
    content: "### `grep`\n\nThe \u201C`grep`\u201D command has a similar use to `find`,\
      \ however, instead of searching for files, `grep` searches within files for\
      \ lines that contain a string you specify. Unlike the *glob patterns* used by\
      \ `find`, `grep` uses a convention called *regular expressions*.\n\n\u201C`grep`\u201D\
      \ stands for \u201C**g**lobal / **r**egular **e**xpression search / and **p**rint\u201D\
      \ - originally it was a series of commands in an editor, but was so useful someone\
      \ turned it into a utility of its own. The general syntax of the command is:\n\
      \n`grep [pattern] [file ...]`\n\nSome options for `grep` include:\n\n- Case\
      \ insensitivity (\u201C`-i`\u201D)\n- Only print the filename that contains\
      \ the pattern (\u201C`-l`\u201D)\n- Print out line numbers along with the matching\
      \ criteria (\u201C`-n`\u201D)\n- Print lines that do not match the criteria\
      \ (\u201C`-v`\u201D).\n\n#### Regular Expressions\n\n\u201C*Regular expressions*\u201D\
      \ are another style of text patterns. They have similar basic uses to globs,\
      \ but are much more complex and powerful. We\u2019ll only present a few of their\
      \ applications here.\n\nFirst, note that some symbols and ideas are shared between\
      \ regular expressions (\u201C*regexes*\u201D) and glob-style patterns. The \u201C\
      `*`\u201D is not a wildcard in a regex, but it does something similar; when\
      \ \u201C`*`\u201D follows a sub-pattern in a regex, the resulting pattern matches\
      \ zero or more occurrences of the sub-pattern.\n\nRegexes allow you to specify\
      \ the number of matches separately from the expression that is matched, whereas\
      \ glob wildcards do both in a single symbol. Here globs are shorter, but regexes\
      \ are more flexible.\n\n### Combine the filters flexibly\n\nPutting it all together,\
      \ you can chain these filters in a number of different ways.\n\nSay if you wanted\
      \ to read a file, look only at lines that contain \"foo\", and then filter down\
      \ to only unique lines, you could do something like:\n\n```\ncat <file> | grep\
      \ -i \"*foo*\" | sort | uniq\n```"
  Question17: &Question17
    type: question
    content: How many unique *sender* ip addresses are in radio_logs.txt?
    comment: ''
    answers:
    - answer_type: String
      value: '24'
      points_possible: 20
    points_possible: 20
    options: []
    question_num: 17
  Question18: &Question18
    type: question
    content: In the "final-task" directory in your home directory, there is a file
      called "hidden-instructions.txt".
    comment: ''
    answers:
    - answer_type: String
      value: $RANDOM
      points_possible: 15
    points_possible: 15
    options: []
    question_num: 18
studentGuide:
  chapters:
  - chapter_num: 1
    title: Welcome to Cybersec
    content_array:
    - *Reading1
    - *Question1
  - chapter_num: 2
    title: Command Line Interface
    content_array:
    - *Reading2
    - *Reading3
  - chapter_num: 3
    title: Man Pages
    content_array:
    - *Reading4
    - *Question2
    - *Reading5
  - chapter_num: 4
    title: Filesystem and Navigation
    content_array:
    - *Reading6
    - *Question3
    - *Reading7
    - *Question4
  - chapter_num: 5
    title: Naming Conventions
    content_array:
    - *Reading8
    - *Question5
  - chapter_num: 6
    title: File Manipulation
    content_array:
    - *Reading9
    - *Question6
    - *Reading10
    - *Question7
    - *Reading11
    - *Question8
    - *Reading12
    - *Question9
    - *Question10
    - *Question11
  - chapter_num: 7
    title: More File Utilities
    content_array:
    - *Reading13
    - *Question12
    - *Question13
    - *Question14
    - *Reading14
  - chapter_num: 8
    title: Redirection and Filters
    content_array:
    - *Reading15
    - *Question15
    - *Reading16
    - *Question16
    - *Reading17
    - *Question17
  - chapter_num: 9
    title: ending
    content_array:
    - *Question18
